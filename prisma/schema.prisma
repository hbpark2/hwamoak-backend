// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["orderByRelation"]
}

model User {
    id                    Int            @id @default(autoincrement())
    firstName             String
    lastName              String?
    username              String         @unique
    email                 String         @unique
    password              String
    bio                   String?
    avatar                String?
    photos                Photo[]
    likes                 Like[]
    plantLikes            PlantLike[]
    followers             User[]         @relation("FollowRelation", references: [id])
    following             User[]         @relation("FollowRelation", references: [id])
    comments              Comment[]
    createdAt             DateTime       @default(now())
    updatedAt             DateTime       @updatedAt
    Room                  Room[]
    Message               Message[]
    Plants                Plants[]
    UserData              UserData[]
    NotificationsReceived Notification[] @relation("NotificationsReceived")
    NotificationsSent     Notification[] @relation("NotificationsSent")
}

model UserData {
    id             Int      @id @default(autoincrement())
    space          String?
    PlantsUserLike Plants[]
    user           User     @relation(fields: [userId], references: [id])
    userId         Int
}

model Photo {
    id           Int            @id @default(autoincrement())
    user         User           @relation(fields: [userId], references: [id])
    userId       Int
    file         String
    caption      String?
    hashtags     Hashtag[]
    likes        Like[]
    comments     Comment[]
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Notification Notification[]
}

model Hashtag {
    id        Int      @id @default(autoincrement())
    hashtag   String   @unique
    photos    Photo[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    plants    Plants[]
}

model Like {
    id        Int      @id @default(autoincrement())
    photo     Photo    @relation(fields: [photoId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    photoId   Int
    userId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([photoId, userId])
}

model Comment {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    photo     Photo    @relation(fields: [photoId], references: [id])
    userId    Int
    photoId   Int
    payload   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Plants    Plants?  @relation(fields: [plantsId], references: [id])
    plantsId  Int?
}

model Room {
    id        Int       @id @default(autoincrement())
    users     User[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    messages  Message[]
}

model Message {
    id        Int      @id @default(autoincrement())
    payload   String
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    room      Room     @relation(fields: [roomId], references: [id])
    roomId    Int
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Plants {
    id             Int           @id @default(autoincrement())
    user           User          @relation(fields: [userId], references: [id])
    userId         Int
    category       String?
    images         PlantsImage[]
    title          String
    caption        String?
    water          Int?
    sunlight       Int?
    temperatureMax Int?
    temperatureMin Int?
    plantDivision  String?
    plantClass     String?
    plantOrder     String?
    plantFamily    String?
    plantGenus     String?
    plantSpecies   String?
    plantHome      String?
    plantHabitat   String?
    comments       Comment[]
    hashtags       Hashtag[]
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    UserData       UserData?     @relation(fields: [userDataId], references: [id])
    userDataId     Int?
    plantLikes     PlantLike[]
}

model PlantsImage {
    id        Int      @id @default(autoincrement())
    file      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    plants    Plants?  @relation(fields: [plantsId], references: [id])
    plantsId  Int?
}

model PlantLike {
    id        Int      @id @default(autoincrement())
    plants    Plants   @relation(fields: [plantsId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    plantsId  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([plantsId, userId])
}

model Notification {
    id               Int      @id @default(autoincrement())
    notificationType String?
    photo            Photo?   @relation(fields: [photoId], references: [id])
    user             User?    @relation("NotificationsReceived", fields: [userId], references: [id])
    sendUser         User?    @relation(name: "NotificationsSent", fields: [sendUserId], references: [id])
    sendUserId       Int?
    photoId          Int?
    userId           Int?
    read             Boolean  @default(false)
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    @@unique([photoId, userId])
}
